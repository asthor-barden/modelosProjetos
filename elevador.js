function createElevador() {
    const group = new THREE.Group();
    
    // PRIMEIRO - Tenta carregar com MTL
    const mtlLoader = new THREE.MTLLoader();
    
    mtlLoader.load(
        'elevador_v2b.mtl',
        function(materials) {
            console.log('‚úÖ MTL CARREGADO!');
            materials.preload();
            
            const objLoader = new THREE.OBJLoader();
            objLoader.setMaterials(materials);
            
            objLoader.load(
                'elevador_v2b.obj', // ‚úÖ ARQUIVO CORRETO AGORA!
                function(object) {
                    console.log('‚úÖ OBJ CARREGADO COM MTL!');
                    
                    object.scale.setScalar(0.01);
                    
                    const box = new THREE.Box3().setFromObject(object);
                    const center = box.getCenter(new THREE.Vector3());
                    object.position.sub(center);
                    
                    // ‚úÖ FOR√áA A APLICA√á√ÉO DAS TEXTURAS DO MTL
                    object.traverse(function(child) {
                        if (child.isMesh) {
                            child.castShadow = true;
                            child.receiveShadow = true;
                            
                            // DEBUG: Mostra qual material est√° sendo usado
                            if (child.material) {
                                console.log('üé® MATERIAL:', child.material.name);
                                if (child.material.map) {
                                    console.log('üñºÔ∏è TEXTURA ENCONTRADA!');
                                } else {
                                    console.log('‚ùå SEM TEXTURA NO MATERIAL');
                                }
                            }
                        }
                    });
                    
                    group.add(object);
                    console.log('‚úÖ ELEVADOR ADICIONADO!');
                },
                function(progress) {
                    console.log('üì¶ CARREGANDO OBJ...');
                },
                function(error) {
                    console.error('‚ùå ERRO OBJ:', error);
                }
            );
        },
        function(progress) {
            console.log('ÔøΩÔøΩ CARREGANDO MTL...');
        },
        function(error) {
            console.error('‚ùå ERRO MTL:', error);
            console.log('‚ùå ERRO MTL - CARREGANDO SEM TEXTURA');
            loadWithoutMTL(group);
        }
    );
    
    group.position.set(0, 0, 0);
    return group;
}

// FUN√á√ÉO FALLBACK SEM MTL
function loadWithoutMTL(group) {
    const loader = new THREE.OBJLoader();
    
    loader.load('elevador_v2b.obj', function(object) { // ‚úÖ ARQUIVO CORRETO!
        console.log('‚úÖ OBJ CARREGADO SEM MTL!');
        
        object.scale.setScalar(0.01);
        
        const box = new THREE.Box3().setFromObject(object);
        const center = box.getCenter(new THREE.Vector3());
        object.position.sub(center);
        
        // ‚úÖ APLICA APENAS A TEXTURA MDF
        const textureLoader = new THREE.TextureLoader();
        const mdfTexture = textureLoader.load('MDF.jpg');
        
        object.traverse(function(child) {
            if (child.isMesh) {
                child.castShadow = true;
                child.receiveShadow = true;
                child.material = new THREE.MeshPhongMaterial({
                    map: mdfTexture,
                    shininess: 30
                });
                console.log('üé® TEXTURA MDF APLICADA MANUALMENTE!');
            }
        });
        
        group.add(object);
        console.log('‚úÖ ELEVADOR FALLBACK ADICIONADO!');
    });
}
